[{"C:\\Users\\nguye\\Desktop\\TAFE\\2021S1\\5WORK\\SourceCode\\FrontEnd\\CCDCFrontEnd\\src\\index.js":"1","C:\\Users\\nguye\\Desktop\\TAFE\\2021S1\\5WORK\\SourceCode\\FrontEnd\\CCDCFrontEnd\\src\\App.js":"2","C:\\Users\\nguye\\Desktop\\TAFE\\2021S1\\5WORK\\SourceCode\\FrontEnd\\CCDCFrontEnd\\src\\reportWebVitals.js":"3","C:\\Users\\nguye\\Desktop\\TAFE\\2021S1\\5WORK\\SourceCode\\FrontEnd\\CCDCFrontEnd\\src\\config.js":"4","C:\\Users\\nguye\\Desktop\\TAFE\\2021S1\\5WORK\\SourceCode\\FrontEnd\\CCDCFrontEnd\\src\\Pages\\DeleteCalendar.js":"5","C:\\Users\\nguye\\Desktop\\TAFE\\2021S1\\5WORK\\SourceCode\\FrontEnd\\CCDCFrontEnd\\src\\Pages\\Home.js":"6","C:\\Users\\nguye\\Desktop\\TAFE\\2021S1\\5WORK\\SourceCode\\FrontEnd\\CCDCFrontEnd\\src\\Pages\\CreateCalendar.js":"7","C:\\Users\\nguye\\Desktop\\TAFE\\2021S1\\5WORK\\SourceCode\\FrontEnd\\CCDCFrontEnd\\src\\Pages\\UpdateCalendar.js":"8","C:\\Users\\nguye\\Desktop\\TAFE\\2021S1\\5WORK\\SourceCode\\FrontEnd\\CCDCFrontEnd\\src\\Pages\\UserAdmin.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":4434,"mtime":1616785856693,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":147,"mtime":1619267030289,"results":"14","hashOfConfig":"11"},{"size":2706,"mtime":1616783050511,"results":"15","hashOfConfig":"11"},{"size":4821,"mtime":1616784783060,"results":"16","hashOfConfig":"11"},{"size":4934,"mtime":1616727766825,"results":"17","hashOfConfig":"11"},{"size":6415,"mtime":1616782992878,"results":"18","hashOfConfig":"11"},{"size":5761,"mtime":1615606329283,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"geo719",{"filePath":"22","messages":"23","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\nguye\\Desktop\\TAFE\\2021S1\\5WORK\\SourceCode\\FrontEnd\\CCDCFrontEnd\\src\\index.js",[],"C:\\Users\\nguye\\Desktop\\TAFE\\2021S1\\5WORK\\SourceCode\\FrontEnd\\CCDCFrontEnd\\src\\App.js",["43","44","45","46","47"],"import React, { useEffect, useState } from 'react';\r\nimport './App.css'\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport 'react-tabs/style/react-tabs.css';\r\nimport Home from './Pages/Home';\r\nimport CreateCalendar from './Pages/CreateCalendar';\r\nimport DeleteCalendar from './Pages/DeleteCalendar';\r\nimport UpdateCalendar from './Pages/UpdateCalendar';\r\nimport UserAdmin from './Pages/UserAdmin';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport appConfig from '../src/config';\r\nimport logo from '../src/logo.png'; \r\n\r\nfunction App() {\r\n  const [loginModalVisible, setLoginModalVisible] = useState(false);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const baseURL = appConfig.BaseURL;\r\n\r\n  const [displayWelcomeCondition, setDisplayWelcomeCondition] = useState(false); \r\n\r\n\r\n  const displayLoginModal = () => {\r\n    setLoginModalVisible(true);\r\n  }\r\n\r\n  const login = () => {\r\n    if (username == \"\" || password == \"\") {\r\n      alert(\"Please enter username and password\")\r\n    } else {\r\n      var request = new XMLHttpRequest();\r\n      request.open('POST', baseURL + 'login/' + username + '/' + password, true)\r\n      request.onload = function () {\r\n        var data = JSON.parse(this.response);\r\n        if (data == true) {\r\n          alert(\"Log in Successfully!\");\r\n          setLoginModalVisible(false);\r\n          setDisplayWelcomeCondition(true); \r\n        } else {\r\n          alert(\"Wrong credential!\");\r\n          setDisplayWelcomeCondition(false); \r\n        }\r\n      }\r\n      request.send()\r\n    }\r\n  }\r\n\r\n  const logout = () => {\r\n    setUsername(\"\"); \r\n    setDisplayWelcomeCondition(false); \r\n  }\r\n\r\n  const close = () => {\r\n    setLoginModalVisible(false);\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"with-react-tabs\">\r\n        <div className=\"headerStyle\">\r\n          <div>\r\n            <div>Customized Commit Date Calculator</div>\r\n            <div><img id=\"logo\" src={logo}/></div>\r\n          </div>\r\n          <div>\r\n            {\r\n              (displayWelcomeCondition) \r\n              ? \r\n              <p id=\"welcomeMessage\"> Welcome, {username} </p>\r\n              :\r\n              <p></p>\r\n            }\r\n            <Button id=\"myLoginButton\" onClick={() => displayLoginModal()}>Log in</Button>\r\n            <Button id=\"myLogoutButton\" onClick={() => logout()}>Log Out</Button>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"tabStyle\">\r\n          <Tabs>\r\n            <TabList>\r\n              <Tab>Home</Tab>\r\n              <Tab>Update Calendar</Tab>\r\n              <Tab>Delete Calendar</Tab>\r\n              <Tab>Create Calendar</Tab>\r\n              <Tab>User Admin</Tab>\r\n            </TabList>\r\n\r\n            <TabPanel>\r\n              <div>\r\n                <Home username = {username}></Home>\r\n              </div>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <div>\r\n                <UpdateCalendar username = {username}></UpdateCalendar>\r\n              </div>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <div>\r\n                <DeleteCalendar username = {username}></DeleteCalendar>\r\n              </div>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <div>\r\n                <CreateCalendar username = {username}></CreateCalendar>\r\n              </div>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <div>\r\n                <UserAdmin username = {username}></UserAdmin>\r\n              </div>\r\n            </TabPanel>\r\n          </Tabs>\r\n        </div>\r\n      </div>\r\n\r\n      <Modal\r\n        show={loginModalVisible}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title>\r\n            Log in\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h6>Username:</h6>\r\n          <input id=\"inputUsernameText\" type=\"text\" onChange={e => setUsername(e.target.value)}></input>\r\n          <h6>Password:</h6>\r\n          <input id=\"inputPasswordText\" type=\"text\" onChange={e => setPassword(e.target.value)}></input>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={() => login()}>Log in</Button>\r\n          <Button onClick={() => close()}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\nexport default App;\r\n\r\n\r\n","C:\\Users\\nguye\\Desktop\\TAFE\\2021S1\\5WORK\\SourceCode\\FrontEnd\\CCDCFrontEnd\\src\\reportWebVitals.js",[],"C:\\Users\\nguye\\Desktop\\TAFE\\2021S1\\5WORK\\SourceCode\\FrontEnd\\CCDCFrontEnd\\src\\config.js",[],"C:\\Users\\nguye\\Desktop\\TAFE\\2021S1\\5WORK\\SourceCode\\FrontEnd\\CCDCFrontEnd\\src\\Pages\\DeleteCalendar.js",["48","49","50","51"],"\r\nimport React, { useEffect, useState } from \"react\";\r\nimport appConfig from './../config';\r\n\r\n\r\n\r\nfunction DeleteCalendar(props) {\r\n\r\n  const username = props.username; \r\n\r\n  const [calendarList, setCalendarList] = useState([]);\r\n  const baseURL = appConfig.BaseURL;\r\n  const [currentCalendarCode, setCurrentCalendarCode] = useState(\"\"); \r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [currentCalendarCode]);\r\n\r\n  const fetchData = () => {\r\n    var request = new XMLHttpRequest();\r\n    request.open('GET', baseURL + 'getCalendarsForUser/' + username, true)\r\n    request.onload = function () {\r\n      var data = JSON.parse(this.response);\r\n      if (data != null) {\r\n        setCalendarList(data);\r\n      }\r\n    }\r\n    request.send()\r\n  }\r\n\r\n  const deleteCalendar = () => {\r\n    if(currentCalendarCode == \"Select Calendar\" || currentCalendarCode == \"\") {\r\n      alert(\"Please select a calendar to delete\"); \r\n    } else {\r\n      var request = new XMLHttpRequest();\r\n          request.open('POST', baseURL + 'deleteCalendar' + '/' + currentCalendarCode, true); \r\n          request.onload = function () {\r\n            var data = JSON.parse(this.response);\r\n            if (data != null) {\r\n              console.log(data.calendarName); \r\n              alert(\"The Calendar \" + data.calendarName + \" has been deleted\"); \r\n              setCurrentCalendarCode(\"Select Calendar\"); \r\n            }\r\n          }\r\n          request.send();\r\n    }\r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <div class=\"tabContainer\">\r\n      <div class=\"pageTitle\"> Delete your calendar</div>\r\n      <div class=\"infoText\">Select and delete your calendar</div>\r\n      <table class=\"tableStyle\">\r\n        <tr class=\"rowContainer\">\r\n          <td><label>Select a calendar to delete:</label></td>\r\n          <td>\r\n            <select name=\"calendar\" id=\"calendar\" onChange = {e => setCurrentCalendarCode(e.target.value)}>\r\n              <option>Select Calendar</option>\r\n              {\r\n                calendarList.map((option, index) => (\r\n                  <option value={option.calendarCode} key={index}>{option.calendarName}</option>\r\n                ))\r\n              }\r\n            </select>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n\r\n\r\n{/* I've commented out the CSS style for div id deletePageButtons. It has a  -30px margin.  */}\r\n      <div id = \"deletePageButtons\"> \r\n      <input id=\"deleteButton\" type=\"button\" value=\"Delete\" onClick = {()=>deleteCalendar()}></input>\r\n      {/* Why is the cancel button here, simply navigate away from the page.  */}\r\n      {/* <input id=\"cancelDeleteButton\" type=\"button\" value=\"Cancel\"></input> */}\r\n      </div>\r\n      \r\n    </div>\r\n\r\n  );\r\n  }\r\n  \r\n  export default DeleteCalendar;\r\n\r\n\r\n\r\n","C:\\Users\\nguye\\Desktop\\TAFE\\2021S1\\5WORK\\SourceCode\\FrontEnd\\CCDCFrontEnd\\src\\Pages\\Home.js",["52","53","54","55","56"],"\r\nimport React, { useEffect, useState } from \"react\";\r\nimport appConfig from './../config';\r\n\r\nfunction Home(props) {\r\n\r\n\r\n  const username = props.username; \r\n  const [calendarList, setCalendarList] = useState([]);\r\n  const [leadTimeInDays, setLeadTimeIndays] = useState(0);\r\n  const [currentCalendarCode, setCurrentCalendarCode] = useState(\"\"); \r\n  const [excludeWeekendOption, setExcludeWeekendOption] = useState(false);\r\n  const [excludeHolidayOption, setExcludeHolidayOption] = useState(false);  \r\n  \r\n\r\n  const [newDate, setNewDate] = useState(\"\");\r\n\r\n  const baseURL = appConfig.BaseURL;\r\n  const currentDate = new Date().toISOString().slice(0,10); \r\n\r\n  const calculateDate = () => {\r\n    if(currentCalendarCode == \"Select Calendar\" || currentCalendarCode == \"\") {\r\n      document.getElementById(\"outputLabel\").style.display = \"none\"; \r\n      alert(\"Please select a calendar to calculate\"); \r\n    } else {\r\n      if (excludeWeekendOption) {\r\n        if (!excludeHolidayOption) {\r\n          fetchNewDate(\"calculateNewDateExcludeWk\");\r\n        } else {\r\n          var request = new XMLHttpRequest();\r\n          request.open('POST', baseURL + 'calculateNewDateExcludeAll' + '?calendarCode=' + 'VIC'\r\n            + '&processingDays=' + leadTimeInDays + '&startDate=' + currentDate, true)\r\n          request.onload = function () {\r\n            var data = JSON.parse(this.response);\r\n            if (data != null) {\r\n              console.log(\"New date = \" + data);\r\n              setNewDate(data); \r\n            }\r\n          }\r\n          request.send();\r\n          document.getElementById(\"outputLabel\").style.display = \"block\"; \r\n        }\r\n      } else {\r\n        // Not exclude anthing\r\n        fetchNewDate(\"calculateNewDate\");\r\n      }\r\n\r\n    }\r\n    \r\n  }\r\n\r\n  const fetchNewDate = (calculatedMethod) => {\r\n    var request = new XMLHttpRequest();\r\n    request.open('POST', baseURL + calculatedMethod + '?startDate='\r\n      + currentDate + '&processingDays=' + leadTimeInDays, true)\r\n    request.onload = function () {\r\n      var data = JSON.parse(this.response);\r\n      if (data != null) {\r\n        console.log(\"New date = \" + data);\r\n        setNewDate(data); \r\n      }\r\n    }\r\n    request.send();\r\n    document.getElementById(\"outputLabel\").style.display = \"block\"; \r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = () => {\r\n    var request = new XMLHttpRequest();\r\n    request.open('GET', baseURL + 'getCalendarsForUser/' + username, true)\r\n    request.onload = function () {\r\n      var data = JSON.parse(this.response);\r\n      if (data != null) {\r\n        setCalendarList(data);\r\n      }\r\n    }\r\n    request.send()\r\n  }\r\n\r\n  const changeExcludeWeekendOption = () => {\r\n    setExcludeWeekendOption(!excludeWeekendOption);\r\n  }\r\n\r\n  const changeExcludeHolidayOption = () => {\r\n    setExcludeHolidayOption(!excludeHolidayOption);\r\n  }\r\n\r\n  return (\r\n    <div class=\"tabContainer\">\r\n      <div class=\"pageTitle\"> Calculate the commit date</div>\r\n      <div class=\"infoText\">Calculate the expected commit date based on the lead time in days</div>\r\n      <table class=\"tableStyle\">\r\n        <tr class=\"rowContainer\">\r\n          <td><label>Select a calendar to use:</label></td>\r\n          <td>\r\n            <select name=\"calendar\" id=\"calendar\" onChange = {e => setCurrentCalendarCode(e.target.value)}>\r\n              <option>Select Calendar</option>\r\n              {\r\n                calendarList.map((option, index) => (\r\n                  <option value={option.calendarCode} key={index}>{option.calendarName}</option>\r\n                ))\r\n              }\r\n            </select>\r\n          </td>\r\n        </tr>\r\n        <tr class=\"rowContainer\">\r\n          <td>\r\n            <label>Enter the lead time in days: </label>\r\n          </td>\r\n          <td>\r\n            <input id=\"inputText\" type=\"text\" onChange={e => setLeadTimeIndays(e.target.value)}></input>\r\n          </td>\r\n        </tr>\r\n        <tr class=\"rowContainer\">\r\n          <td>\r\n            <label>Exclude Weekend in Calculation </label>\r\n          </td>\r\n          <td>\r\n            <input type=\"checkbox\" onClick={() => changeExcludeWeekendOption()} ></input>\r\n          </td>\r\n        </tr>\r\n        <tr class=\"rowContainer\">\r\n          <td>\r\n            <label>Exclude Holiday in Calculation </label>\r\n          </td>\r\n          <td>\r\n            <input type=\"checkbox\" disabled = {!excludeWeekendOption} onClick={() => changeExcludeHolidayOption()}></input>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n      <input id=\"calculateButton\" type=\"button\" value=\"Calculate commit date\" onClick={() => calculateDate()}></input>\r\n      <div id = \"outputLabel\">\r\n        <label> The New Commit Date based on above setting and calendar is {newDate} </label>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Home;","C:\\Users\\nguye\\Desktop\\TAFE\\2021S1\\5WORK\\SourceCode\\FrontEnd\\CCDCFrontEnd\\src\\Pages\\CreateCalendar.js",["57","58","59","60","61"],"\r\nimport React, { useEffect, useState } from \"react\";\r\nimport appConfig from './../config';\r\n\r\n\r\n\r\nfunction CreateCalendar() {\r\n\r\n  const baseURL = appConfig.BaseURL; \r\n\r\n  const [calendarCode, setCalendarCode] = useState(\"\"); \r\n  const [calendarName, setCalendarName] = useState(\"\"); \r\n  const [place, setPlace] = useState(\"\"); \r\n  const [description, SetDescription] = useState(\"\"); \r\n\r\n\r\n  const createCalendar = () => {\r\n    console.log(calendarCode); \r\n    console.log(calendarName); \r\n    if(calendarCode == \"\" || calendarName == \"\" || description == \"\") {\r\n      alert(\"Please enter calendar code, name and description\"); \r\n    } else {\r\n      var request = new XMLHttpRequest();\r\n          request.open('POST', baseURL + 'createCalendar' + '?calendarCode=' + calendarCode\r\n            + '&calendarName=' + calendarName + '&place=' + place + '&description=' + description, true)\r\n          request.onload = function () {\r\n            var data = JSON.parse(this.response);\r\n            if (data != null) {\r\n              alert(\"New Calendar \" + data.calendarName + \" has been added\"); \r\n            }\r\n          }\r\n          request.send();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div class=\"tabContainer\">\r\n      <div class=\"pageTitle\"> Create your calendar</div>\r\n      <div class=\"infoText\">Create your customized calendar</div>\r\n      <table class=\"tableStyle\">\r\n\r\n        <tr class=\"rowContainer\">\r\n          <td class=\"removeDateTableRow\"><label>Calendar Code:</label></td>\r\n          <td class=\"removeDateTableRow\"><input id=\"inputCalendarCodeText\" type=\"text\" onChange={e => setCalendarCode(e.target.value)}></input></td>\r\n        </tr>\r\n        <tr class=\"rowContainer\">\r\n          <td class=\"removeDateTableRow\"><label>Calendar Name:</label></td>\r\n          <td class=\"removeDateTableRow\"><input id=\"inputCalendarNameText\" type=\"text\" onChange={e => setCalendarName(e.target.value)}></input></td>\r\n        </tr>\r\n\r\n        <tr class=\"rowContainer\">\r\n          <td class=\"removeDateTableRow\"><label>Place:</label></td>\r\n          <td class=\"removeDateTableRow\"><input id=\"inputPlaceText\" type=\"text\" onChange={e => setPlace(e.target.value)}></input></td>\r\n        </tr>\r\n\r\n        <tr class=\"rowContainer\">\r\n          <td class=\"removeDateTableRow\"><label>Description:</label></td>\r\n          <td class=\"removeDateTableRow\"><input id=\"inputDescriptionText\" type=\"text\" onChange={e => SetDescription(e.target.value)}></input></td>\r\n        </tr>\r\n\r\n        {/* <tr class=\"rowContainer\">\r\n          <td id=\"nonworkingdaysLabel\" class=\"removeDateTableRow\"><label>Non-working days:</label></td>\r\n          <td id=\"nonWorkingdaysCheckboxes\" class=\"removeDateTableRow\">\r\n            <table class=\"selectDateInWeekTable\">\r\n              <tr>\r\n                <td><input type=\"checkbox\"></input> <label>Monday</label></td>\r\n              </tr>\r\n              <tr>\r\n                <td><input type=\"checkbox\"></input> <label>Tuesday</label></td>\r\n              </tr>\r\n              <tr>\r\n                <td><input type=\"checkbox\"></input> <label>Wednesday</label></td>\r\n              </tr>\r\n              <tr>\r\n                <td><input type=\"checkbox\"></input> <label>Thursday</label></td>\r\n              </tr>\r\n              <tr>\r\n                <td><input type=\"checkbox\"></input> <label>Friday</label></td>\r\n              </tr>\r\n            </table>\r\n          </td>\r\n        </tr> */}\r\n\r\n        {/* I'd say that adding extra days should be in the update calendar tab */}\r\n\r\n        {/* <tr class=\"rowContainer\">\r\n          <td class=\"removeDateTableRow\" colspan=\"2\"><label>Add other non-working days:</label></td>          \r\n        </tr>\r\n\r\n        <tr class=\"rowContainer\">\r\n          <td class=\"removeDateTableRow\">\r\n            <label class=\"updateCalendarLabels\">Name: </label>\r\n          </td>\r\n          <td class=\"removeDateTableRow\">\r\n            <input id=\"inputText\" name=\"newDateNameTextBox\"type=\"text\"></input>\r\n          </td>\r\n        </tr>\r\n\r\n        <tr class=\"rowContainer\">\r\n          <td class=\"removeDateTableRow\">\r\n            <label class=\"updateCalendarLabels\">Date: </label>\r\n          </td>\r\n          <td  class=\"removeDateTableRow\">\r\n            <input id=\"datePicker\" type=\"date\" name=\"newDateInput\"></input>\r\n          </td>\r\n        </tr>\r\n\r\n        <tr class=\"rowContainer\">\r\n          <td class=\"removeDateTableRow\"></td>\r\n          <td class=\"removeDateTableRow\">\r\n            <input id=\"addNonWorkingdayButton\" type=\"button\" value=\"Add Extra Day\"></input>\r\n          </td>\r\n        </tr> */}\r\n\r\n\r\n      </table>\r\n\r\n\r\n{/* Does the save button, commit changes to database, \r\nor are the changes committed when using the add / remove buttons above? */}\r\n      <input id=\"updateButton\" type=\"button\" value=\"Save\" onClick = {()=>createCalendar()}></input>\r\n      {/* <input id=\"cancelButton\" type=\"button\" value=\"Cancel\"></input> */}\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default CreateCalendar;\r\n\r\n\r\n\r\n","C:\\Users\\nguye\\Desktop\\TAFE\\2021S1\\5WORK\\SourceCode\\FrontEnd\\CCDCFrontEnd\\src\\Pages\\UpdateCalendar.js",["62","63","64","65","66","67","68"],"import React, { useEffect, useState } from \"react\";\r\nimport appConfig from './../config';\r\n\r\nfunction UpdateCalendar(props) {\r\n  const username = props.username; \r\n\r\n  const [calendarList, setCalendarList] = useState([]);\r\n  const baseURL = appConfig.BaseURL;\r\n\r\n  const [currentCalendarCode, setCurrentCalendarCode] = useState(\"\"); \r\n  const [nonWorkingDayCode, setNonWorkingDayCode] = useState(\"\"); \r\n  const [nonWorkingDayName, setNonWorkingDayName] = useState(\"\"); \r\n  const [nonWorkingDayList, setNonWorkingDayList] = useState([]); \r\n\r\n  const [dateToAdd, setDateToAdd] = useState(\"\"); \r\n\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchNonWorkingDayList();\r\n  }, [currentCalendarCode, nonWorkingDayList]);\r\n\r\n  const fetchNonWorkingDayList = () => {\r\n    var request = new XMLHttpRequest();\r\n    request.open('GET', baseURL + 'getNonWorkingDaysForCalendar' + '/' + currentCalendarCode, true)\r\n    request.onload = function () {\r\n      var data = JSON.parse(this.response);\r\n      if (data != null) {\r\n        setNonWorkingDayList(data);\r\n      }\r\n    }\r\n    request.send()\r\n  }\r\n\r\n  const fetchData = () => {\r\n    var request = new XMLHttpRequest();\r\n    request.open('GET', baseURL + 'getCalendarsForUser/' + username, true)\r\n    request.onload = function () {\r\n      var data = JSON.parse(this.response);\r\n      if (data != null) {\r\n        setCalendarList(data);\r\n      }\r\n    }\r\n    request.send()\r\n  }\r\n\r\n  const addNonWorkingDate = () => {\r\n    if(currentCalendarCode == \"Select Calendar\" || currentCalendarCode == \"\") {\r\n      alert(\"Please select a calendar to calculate\"); \r\n    } else {\r\n      var request = new XMLHttpRequest();\r\n          request.open('POST', baseURL + 'addNonWorkingDayToCalendar' + '?calendarCode=' + currentCalendarCode\r\n            + '&nonWorkingDayCode=' + nonWorkingDayCode + '&nonWorkingDayName=' + nonWorkingDayName + '&date=' + dateToAdd, true)\r\n          request.onload = function () {\r\n            var data = JSON.parse(this.response);\r\n            if (data != null) {\r\n              setNonWorkingDayList(data); \r\n              console.log(data); \r\n            }\r\n          }\r\n          request.send();\r\n    }\r\n  }\r\n\r\n  const deleteNonWorkingDay = (nonWorkingDayCodeToDelete) => {\r\n    var request = new XMLHttpRequest();\r\n    request.open('POST', baseURL + 'deleteNonWorkingDayFromCalendar' + '?calendarCode=' + currentCalendarCode + '&nonWorkingDayCode=' + nonWorkingDayCodeToDelete, true)\r\n    request.onload = function () {\r\n      var data = JSON.parse(this.response);\r\n      if (data != null) {\r\n        setNonWorkingDayList(data);\r\n      }\r\n    }\r\n    request.send()\r\n  }\r\n\r\n  return (\r\n    <div class=\"tabContainer\">\r\n      <div class=\"pageTitle\"> Update your calendar</div>\r\n      <div class=\"infoText\">Update the Non-Working days for your calendar</div>\r\n      \r\n      <table class=\"tableStyle\" >\r\n\r\n        <tr class=\"rowContainer\">\r\n          <td class=\"removeDateTableRow\"><label>Select a calendar to use:</label></td>\r\n          <td class=\"removeDateTableRow\">\r\n            <select name=\"calendar\" id=\"calendar\" onChange = {e => setCurrentCalendarCode(e.target.value)}>\r\n              <option>Select Calendar</option>\r\n              {\r\n                calendarList.map((option, index) => (\r\n                  <option value={option.calendarCode} key={index}>{option.calendarName}</option>\r\n                ))\r\n              }\r\n            </select>\r\n          </td>\r\n        </tr>\r\n        \r\n        <tr class=\"rowContainer\">\r\n          <td colspan=\"2\" class=\"removeDateTableRow\">\r\n            <label>Add a new Non-Working day:</label>\r\n          </td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td class=\"removeDateTableRow\">\r\n            <label class=\"updateCalendarLabels\">Code: </label>\r\n          </td>\r\n          <td class=\"removeDateTableRow\">\r\n            <input id=\"inputCodeText\" name=\"newDateCodeTextBox\" type=\"text\" onChange={e => setNonWorkingDayCode(e.target.value)}></input>\r\n          </td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td class=\"removeDateTableRow\">\r\n            <label class=\"updateCalendarLabels\">Name: </label>\r\n          </td>\r\n          <td class=\"removeDateTableRow\">\r\n            <input id=\"inputNameText\" name=\"newDateNameTextBox\" type=\"text\" onChange={e => setNonWorkingDayName(e.target.value)}></input>\r\n          </td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td class=\"removeDateTableRow\">\r\n            <label class=\"updateCalendarLabels\">Date: </label>\r\n          </td>\r\n          <td  class=\"removeDateTableRow\">\r\n            <input id=\"datePicker\" type=\"date\" name=\"newDateInput\" onChange={e => setDateToAdd(e.target.value)}></input>\r\n          </td>\r\n        </tr>\r\n        \r\n        <tr>\r\n          <td class=\"removeDateTableRow\"></td>\r\n          <td class=\"removeDateTableRow\">\r\n            <input id=\"addNonWorkingdayButton\" type=\"button\" value=\"Add\" onClick = {()=>addNonWorkingDate()}></input>\r\n          </td>\r\n        </tr>\r\n\r\n        <tr class=\"rowContainer\">\r\n          <td colSpan=\"2\" class=\"removeDateTableRow\" id=\"removeNWdaysTitle\">\r\n            <label>Current Nonworking days:</label>\r\n          </td>\r\n        </tr>\r\n\r\n        <tr class=\"rowContainer\">\r\n\r\n          <td colspan=\"2\"  class=\"removeDateTableRow\">\r\n            <table class=\"removeDateTable\">\r\n              <tr>\r\n                <td class=\"removeDateTableHeader\">Name</td>\r\n                <td class=\"removeDateTableHeader\">Date</td>\r\n                <td class=\"removeDateTableHeader\">Action</td>\r\n              </tr>\r\n              {\r\n                nonWorkingDayList.map((nonWorkingDay, index) => (\r\n                  <tr>\r\n                    <td class=\"removeDateTableRow\">{nonWorkingDay.nwdayName}</td>\r\n                    <td class=\"removeDateTableRow\">{nonWorkingDay.date}</td>\r\n                    <td class=\"removeDateTableRow\">\r\n                      <input id=\"removeNonWorkingdayButton\" type=\"button\" value=\"Remove\" onClick = {()=>deleteNonWorkingDay(nonWorkingDay.nwdayCode)}></input>\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              }\r\n            </table>\r\n          </td>\r\n          <td>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n      {/* <input id=\"updateButton\" type=\"button\" value=\"Save\"></input>\r\n      <input id=\"cancelButton\" type=\"button\" value=\"Cancel\"></input> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UpdateCalendar;","C:\\Users\\nguye\\Desktop\\TAFE\\2021S1\\5WORK\\SourceCode\\FrontEnd\\CCDCFrontEnd\\src\\Pages\\UserAdmin.js",[],{"ruleId":"69","severity":1,"message":"70","line":1,"column":17,"nodeType":"71","messageId":"72","endLine":1,"endColumn":26},{"ruleId":"73","severity":1,"message":"74","line":30,"column":18,"nodeType":"75","messageId":"76","endLine":30,"endColumn":20},{"ruleId":"73","severity":1,"message":"74","line":30,"column":36,"nodeType":"75","messageId":"76","endLine":30,"endColumn":38},{"ruleId":"73","severity":1,"message":"74","line":37,"column":18,"nodeType":"75","messageId":"76","endLine":37,"endColumn":20},{"ruleId":"77","severity":1,"message":"78","line":64,"column":18,"nodeType":"79","endLine":64,"endColumn":45},{"ruleId":"80","severity":1,"message":"81","line":17,"column":6,"nodeType":"82","endLine":17,"endColumn":27,"suggestions":"83"},{"ruleId":"73","severity":1,"message":"74","line":32,"column":28,"nodeType":"75","messageId":"76","endLine":32,"endColumn":30},{"ruleId":"73","severity":1,"message":"74","line":32,"column":72,"nodeType":"75","messageId":"76","endLine":32,"endColumn":74},{"ruleId":"84","severity":1,"message":"85","line":36,"column":59,"nodeType":"75","messageId":"86","endLine":36,"endColumn":60},{"ruleId":"73","severity":1,"message":"74","line":22,"column":28,"nodeType":"75","messageId":"76","endLine":22,"endColumn":30},{"ruleId":"73","severity":1,"message":"74","line":22,"column":72,"nodeType":"75","messageId":"76","endLine":22,"endColumn":74},{"ruleId":"84","severity":1,"message":"85","line":31,"column":71,"nodeType":"75","messageId":"86","endLine":31,"endColumn":72},{"ruleId":"84","severity":1,"message":"85","line":31,"column":90,"nodeType":"75","messageId":"86","endLine":31,"endColumn":91},{"ruleId":"80","severity":1,"message":"81","line":69,"column":6,"nodeType":"82","endLine":69,"endColumn":8,"suggestions":"87"},{"ruleId":"69","severity":1,"message":"70","line":2,"column":17,"nodeType":"71","messageId":"72","endLine":2,"endColumn":26},{"ruleId":"73","severity":1,"message":"74","line":20,"column":21,"nodeType":"75","messageId":"76","endLine":20,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":20,"column":43,"nodeType":"75","messageId":"76","endLine":20,"endColumn":45},{"ruleId":"73","severity":1,"message":"74","line":20,"column":64,"nodeType":"75","messageId":"76","endLine":20,"endColumn":66},{"ruleId":"84","severity":1,"message":"85","line":24,"column":59,"nodeType":"75","messageId":"86","endLine":24,"endColumn":60},{"ruleId":"80","severity":1,"message":"81","line":20,"column":6,"nodeType":"82","endLine":20,"endColumn":8,"suggestions":"88"},{"ruleId":"80","severity":1,"message":"89","line":24,"column":6,"nodeType":"82","endLine":24,"endColumn":46,"suggestions":"90"},{"ruleId":"84","severity":1,"message":"85","line":28,"column":66,"nodeType":"75","messageId":"86","endLine":28,"endColumn":67},{"ruleId":"73","severity":1,"message":"74","line":51,"column":28,"nodeType":"75","messageId":"76","endLine":51,"endColumn":30},{"ruleId":"73","severity":1,"message":"74","line":51,"column":72,"nodeType":"75","messageId":"76","endLine":51,"endColumn":74},{"ruleId":"84","severity":1,"message":"85","line":55,"column":71,"nodeType":"75","messageId":"86","endLine":55,"endColumn":72},{"ruleId":"84","severity":1,"message":"85","line":70,"column":70,"nodeType":"75","messageId":"86","endLine":70,"endColumn":71},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["91"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat",["92"],["93"],"React Hook useEffect has a missing dependency: 'fetchNonWorkingDayList'. Either include it or remove the dependency array.",["94"],{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},{"desc":"97","fix":"99"},{"desc":"100","fix":"101"},"Update the dependencies array to be: [currentCalendarCode, fetchData]",{"range":"102","text":"103"},"Update the dependencies array to be: [fetchData]",{"range":"104","text":"105"},{"range":"106","text":"105"},"Update the dependencies array to be: [currentCalendarCode, fetchNonWorkingDayList, nonWorkingDayList]",{"range":"107","text":"108"},[387,408],"[currentCalendarCode, fetchData]",[2329,2331],"[fetchData]",[641,643],[706,746],"[currentCalendarCode, fetchNonWorkingDayList, nonWorkingDayList]"]